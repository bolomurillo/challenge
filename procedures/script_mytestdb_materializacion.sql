-- Crear evento para actualizar tablas de vistas materializadas
DELIMITER ;;
DROP EVENT IF EXISTS mytestdb.EV_MATERIALIZADA;;

CREATE EVENT mytestdb.EV_MATERIALIZADA
ON SCHEDULE EVERY 1 DAY STARTS '2020-07-20 00:00:00'
COMMENT 'Generacion de tablas de vistas materializadas'
DO BEGIN
  CALL mytestdb.SP_MATERIALIZADA();
END;;



DROP PROCEDURE IF EXISTS mytestdb.SP_MATERIALIZADA;;

CREATE PROCEDURE mytestdb.SP_MATERIALIZADA()
PROC_LABEL:BEGIN

-- Vista materializada para usuarios activos por dia
DROP TABLE IF EXISTS mytestdb.MVI001_USUARIOS_DIA;

CREATE TABLE mytestdb.MVI001_USUARIOS_DIA AS
SELECT
  DATE_FORMAT(AC.FH_INICIO, '%Y-%m-%d') AS FECHA, 
  US.NB_EMAIL USUARIO, 
  ES.NB_ESTILO_SHOW ESTILO,
  SH.NB_SHOW PROGRAMA, 
  SUM(AC.DU_CONEXION) TIEMPO_CONEXION
FROM mytestdb.TVI008_ACTIVIDAD AC
JOIN mytestdb.TVI001_USUARIO US
  ON AC.CD_USUARIO = US.CD_USUARIO
 AND US.ST_USUARIO = 1
JOIN mytestdb.TVI007_SHOW SH
  ON AC.CD_SHOW = SH.CD_SHOW
JOIN mytestdb.TVI006_ESTILO_SHOW ES
  ON SH.CD_ESTILO_SHOW = ES.CD_ESTILO_SHOW
WHERE DATE(FH_INICIO) = CURDATE()
GROUP BY AC.CD_USUARIO, AC.CD_SHOW
ORDER BY AC.CD_USUARIO;


-- Vista materializada para usuarios activos por mes
DROP TABLE IF EXISTS mytestdb.MVI002_USUARIOS_MES;

CREATE TABLE mytestdb.MVI002_USUARIOS_MES AS
SELECT 
  DATE_FORMAT(AC.FH_INICIO, '%Y-%m-%d') AS MES,
  US.NB_EMAIL USUARIO, 
  ES.NB_ESTILO_SHOW ESTILO, 
  SH.NB_SHOW PROGRAMA, 
  SUM(AC.DU_CONEXION) TIEMPO_CONEXION
FROM mytestdb.TVI008_ACTIVIDAD AC
JOIN mytestdb.TVI001_USUARIO US
  ON AC.CD_USUARIO = US.CD_USUARIO
 AND US.ST_USUARIO = 1
JOIN mytestdb.TVI007_SHOW SH
  ON AC.CD_SHOW = SH.CD_SHOW
JOIN mytestdb.TVI006_ESTILO_SHOW ES
  ON SH.CD_ESTILO_SHOW = ES.CD_ESTILO_SHOW
-- WHERE DATE_FORMAT(FH_INICIO, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m')
GROUP BY AC.CD_USUARIO, AC.CD_SHOW
ORDER BY MES, AC.CD_USUARIO;

END;;
DELIMITER ;
